* init.el
:PROPERTIES:
:header-args: :tangle init.el
:END:
** Core
*** Base Emacs setup
#+begin_src elisp
  ;;; -*- lexical-binding: t; -*-
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (use-package emacs
    :custom
    (enable-recursive-minibuffers t)
    (completion-ignore-case t)
    (debug-on-error t)
    (warning-minimum-level :error)
    (disabled-command-function nil))
#+end_src
*** Standard cosmetic modifications
#+begin_src elisp
  ;;; Core Emacs configuration
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (blink-cursor-mode -1)
  (minibuffer-depth-indicate-mode 1)
  (global-hl-line-mode 1)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src
*** User-Based Cosmetics
#+begin_src elisp
  (use-package ef-themes
    :ensure t
    :config
    (load-theme 'ef-melissa-light t))
#+end_src
*** Convenience bindings
#+begin_src elisp
  (defun personal-goto-init-file ()
    (interactive)
    (if (string= (file-name-extension user-init-file) "el")
        (find-file user-init-file)
      (find-file (concat user-emacs-directory "init.el"))))
  (defun personal-goto-init-literate-file ()
    (interactive)
    (find-file (concat user-emacs-directory "init.org")))
  (defun personal-quick-init-eval ()
    (interactive)
    (if (string= (file-name-extension user-init-file) "el")
        (let (
     	    (init-file-buffer (find-file-noselect user-init-file))
     	    )
     	(with-current-buffer init-file-buffer
     	  (eval-buffer))
     	(kill-buffer init-file-buffer))
      (message "A dynamic elisp init file was not used!")))
  (defun personal-org-tangle-eval ()
    "Evaluates the elisp file that the current org file tangles into.
  Quick hack."
    (interactive)
    (let (
  	(el-file-name nil)
  	)
      (with-current-buffer (current-buffer)
        (save-excursion
  	(goto-char (point-min))
  	(setq el-file-name (buffer-substring-no-properties (search-forward ":header-args: :tangle ") (re-search-forward ".*\\.el")))))
      (if (file-exists-p el-file-name)
  	(let (
  	      (el-file-buffer-maybe (get-file-buffer el-file-name))
  	      )
  	  (when el-file-buffer-maybe
  	    (with-current-buffer el-file-buffer-maybe
  	      (kill-buffer)))
  	  (with-current-buffer (find-file-noselect el-file-name)
  	    (eval-buffer))
  	  )
        (message "Could not find the tangled elisp file!")
        )
      )
    )

  (keymap-global-set "C-c b" #'eval-buffer)
  (keymap-global-set "C-c o b" #'personal-org-tangle-eval)
  (keymap-global-set "C-c m i" #'personal-goto-init-file)
  (keymap-global-set "C-c m o" #'personal-goto-init-literate-file)
  (keymap-global-set "C-c m b" #'personal-quick-init-eval)
  (keymap-global-set "C-z" #'other-window)
  (keymap-global-set "M-o" #'other-window)
#+end_src
*** Completion goodies
#+begin_src elisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)
    )
  
  (use-package vertico
    :ensure t
    :config
    (vertico-mode))

  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
#+end_src
*** Setup-Related Snippets
This is where snippets of elisp that I plan to use within configuration for other packages will go.
#+begin_src elisp
  (defun shell-command-check (cmd expected-out)
    "Calls CMD, then checks the output for EXPECTED-OUT.
  If it's present, return the output, else return nil."
    (let (
  	(cmd-ret (shell-command-to-string cmd))
  	)
      (when (string-match-p (regexp-quote expected-out) cmd-ret)
        cmd-ret
        )
      )
    )
#+end_src
** Formal
*** Org-mode set up
Even though org-mode isn't exclusively for study/office work, I still think it's best to
configure it within this section.
#+begin_src elisp
  (use-package org-mode
    :hook (org-mode . org-indent-mode)
    :custom
    (org-startup-folded 'fold)
    (org-startup-with-inline-images t)
    (org-return-follows-link t)
    (org-todo-keywords `(
  		       (sequence "TODO" "|" "DONE")
  		       (sequence "IMPORTANT" "|" "ACCOMPLISHED")))
    (org-todo-keyword-faces `(
  			    ("IMPORTANT" . "crimson")
  			    ("ACCOMPLISHED" . "forest green")
  			    ("DONE" . "forest green")))
    )
#+end_srco
*** Org-roam note taking
#+begin_src elisp
    (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory (expand-file-name "~/life/note-pool/"))
      :bind ((:map org-mode-map
    	       ("C-c r f" . org-roam-node-find)
    	       ("C-c r s" . org-roam-db-sync)))
      )
#+end_src
** Programming
*** Overarching
#+begin_src elisp
  (use-package magit
    :ensure t
    :defer t)
  (use-package forge
    :ensure t
    :after magit)

  (use-package disproject
    :vc (disproject
         :url "https://github.com/aurtzy/disproject"
         :branch "master")
    :bind (:map ctl-x-map
  	      ("p" . disproject-dispatch)))
    
    (use-package devdocs
      :ensure t)
#+end_src
*** C
#+begin_src elisp
  (unless (file-exists-p (concat devdocs-data-dir "/c"))
    (devdocs-install "c"))

  (use-package rmsbolt
    :ensure t
    :bind ((:map c-mode-map
       	       ("C-c r" . rmsbolt))
       	 (:map c++-mode-map
       	       ("C-c r" . rmsbolt))))

  (require 'cc-mode)
  (add-hook 'c-mode-hook 'init--activate-lsp)
  (defun c-quick-compile ()
    "Simply compiles the active C source file."
    (interactive)
    (let* (
  	 (flags "-g -Wall -Wextra -O0")
  	 (file-name (buffer-file-name (current-buffer)))
  	 )
      (if (string= (file-name-extension file-name) "c")
  	(compile (concat "gcc " file-name " " flags " -o " (file-name-sans-extension file-name)) t)
        (message "You're not in a C buffer! Why'd you even call this function?")
        )
      )
    )
  (define-key c-mode-map (kbd "C-c c") #'c-quick-compile)

  (use-package gdb-mi
    :custom
    (gdb-many-windows t)
    (gdb-show-maint t)
    (gdb-restore-window-configuration-after-quit t)
    :bind ((:map c-mode-map
     	       ("C-c d" . 'gdb))
     	 (:map c++-mode-map
     	       ("C-c d" . 'gdb)))
    )
#+end_src
*** Common Lisp
#+begin_src elisp
  (use-package slime
    :ensure t
    :commands slime
    :init
    (setq inferior-lisp-program "sbcl")
    :config
    (slime-setup))
#+end_src
*** Misc Smaller Languages
#+begin_src elisp
  (use-package powershell
    :ensure t)
#+end_src
** Misc
*** Fun
#+begin_src elisp
  (use-package tetris
    :bind (:map tetris-mode-map
  	      ("w" . tetris-rotate-prev)
  	      ("a" . tetris-move-left)
  	      ("s" . tetris-move-down)
  	      ("d" . tetris-move-right)
  	      ("e" . tetris-move-bottom)))
  (use-package snake
    :bind (:map snake-mode-map
  	      ("w" . snake-move-up)
  	      ("a" . snake-move-left)
  	      ("s" . snake-move-down)
  	      ("d" . snake-move-right)))
#+end_src
*** Communication/Viewing
#+begin_src elisp
  (defcustom gmail-directory nil
    "Full directory wherein gmail was initialized using relevant tools.")

  (defun gmailieer-sync ()
    (interactive)
    (let (
  	(default-directory gmail-directory)
  	(gmi-cmd-ret (shell-command-check "gmi sync" "pull:"))
  	)
      (if gmi-cmd-ret
  	(message "Emails have been synced successfully!")
        (message "Failed to sync emails."))
      )
    )

  (use-package notmuch
    :ensure t
    :defer t
    :bind (
  	 (:map notmuch-hello-mode-map
  	       ("C-c s" . gmailieer-sync))
  	 (:map notmuch-search-mode-map
  	       ("C-c s")
  	       )
  	 )
    :custom
    (notmuch-hello-mode-hook (lambda ()
  			     (notmuch-search "all")))
    (gmail-directory "/root/gmail/")
    )

  (use-package erc
    :init
    (require 'erc-log)
    :commands erc
    :custom
    (erc-nick "yakh")
    (erc-server "irc.libera.chat")
    (erc-port 6667)
    (erc-log-channels-directory "~/.emacs.d/erc-logs/")
    (erc-save-buffer-on-part t)
    (erc-save-queries-on-quit t)
    (erc-log-write-after-send t)
    (erc-log-write-after-insert t)
    :config
    (add-to-list 'erc-modules 'log t)
    (erc-update-modules))

  (use-package elfeed
    :ensure t
    :custom
    (elfeed-feeds '(
  		  "https://planet.emacslife.com/atom.xml"
  		  "https://raw.githubusercontent.com/francisrstokes/githublog/main/feed.xml"
  		  "https://joshblais.com/index.xml"
  		  ))
    )
#+end_src
*** Faster movement
#+begin_src elisp
  (use-package avy
    :ensure t
    :bind (("C-;" . avy-goto-char-2)))
#+end_src
*** Trying new packages
#+begin_src elisp
  (use-package try
    :ensure t
    :defer t)
#+end_src
*** Fuzzy-finding/Better finding with Consult
#+begin_src elisp
  (use-package consult
    :ensure t
    :bind ("C-x C-b" . consult-buffer))
  
  (use-package affe
    :ensure t
    :config
    (unless (shell-command-check "rg" "requires at least one pattern")
      (setq affe-grep-command "grep -rZ --color=never --exclude-dir='.git' -n -v '^$' %s ."))
    )
#+end_src
